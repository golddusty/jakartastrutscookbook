<!--
	ObJectRelationalBridge - Bridging Java objects and relational dabatases
	This DTD describes the grammar of the Descriptor repository
	Author: Thomas Mahler, (c) 2000, 2001, 2002
  -->

<!--
	The descriptor-repository is the root element of a repository.xml file.
	It consists of one jdbc-connection-descriptor and at least one
	class-descriptor element.

	The jdbc-connection-descriptor element specifies the default jdbc
	connection for the repository.

	class-descriptor elements specify o/r mapping information for
	persistent classes.
  -->
<!ELEMENT descriptor-repository (jdbc-connection-descriptor, class-descriptor+)>
<!--
    The isolation attribute defines the default isolation level for
    class-descriptor that do not define a specific isolation level.

	The version attribute is used to bind a repository.xml file to a given
	version of this dtd. This will help to avoid versions conflicts.
  -->
<!ATTLIST descriptor-repository
	version (0.9.4) #REQUIRED
	isolation-level (read-uncommitted | read-committed | repeatable-read |
	                 serializable | optimistic) "read-uncommitted"
>

<!--
	The jdbc-connection-descriptor element specifies the default jdbc
	connection for the repository. All class-descriptor elements that do not
	specify their own jdbc-connection-descriptor will use the default jdbc
	connection.
	
	A connection-pool element may be used to define connection pool 
	properties for the specified JDBC connection.
  -->
<!ELEMENT jdbc-connection-descriptor (connection-pool?)>
<!--
	The platform attribute is used to define the specific RDBMS Platform.
	This attribute corresponds to a
	org.apache.ojb.broker.platforms.PlatformXXXImpl class.

	The jdbc-level attribute is used to specify the Jdbc compliance
	level of the used Jdbc driver.

	If a jndi-datasource-name for JNDI based lookup of Jdbc Connections is
    specified, the four attributes driver, protocol, subprotocol, dbalias
    used for Jdbc DriverManager based construction of Jdbc Connections
    must not be declared.

    The username and password attributes are used as credentials for obtaining
    a jdbc connections.
    If users don't want to keep this information the repository.xml file,
    they'll have to perform an explicit call to PersistenceBroker.open(...).
  -->
<!ATTLIST jdbc-connection-descriptor
	platform (Db2 | Hsqldb | Informix | MsAccess | MsSQLServer |
	          MySQL | Oracle | PostgreSQL | Sybase | Sapdb) "Hsqldb"
	jdbc-level (1.0 | 2.0 | 3.0) "1.0"

	jndi-datasource-name CDATA #IMPLIED

	driver CDATA #IMPLIED
	protocol CDATA #IMPLIED
	subprotocol CDATA #IMPLIED
	dbalias CDATA #IMPLIED

	username CDATA #IMPLIED
	password CDATA #IMPLIED
>

<!--
	The connection-pool element specifies the connection pooling
	parameter.
-->
<!ELEMENT connection-pool EMPTY>
<!--
	maxActive
	maximum number of connections that can be borrowed from the
	pool at one time. When non-positive, there is no limit.
	
	maxIdle
	controls the maximum number of connections that can sit idle in the
	pool at any time. When non-positive, there is no limit
	
	maxWait
	max time block to get connection instance from pool, after that exception is thrown.
	When non-positive, block till last judgement
	
	whenExhaustedAction
	0 - fail when pool is exhausted
	1 - block when pool is exhausted
	2 - grow when pool is exhausted
	
	
	testOnBorrow
	The pool will attempt to validate each object before it is returned from the pool
	
	testOnReturn
	The pool will attempt to validate each object before it is returned to the pool
	
	testWhileIdle
	Indicates whether or not idle objects should be validated.
	Objects that fail to validate will be dropped from the pool
	
	timeBetweenEvictionRunsMillis
	indicates how long the eviction thread should sleep before "runs" of examining
	idle objects. When non-positive, no eviction thread will be launched.
	
	minEvictableIdleTimeMillis
	specifies the minimum amount of time that a connection may sit idle
	in the pool before it is eligable for eviction due to idle time.
	When non-positive, no connection will be dropped from the pool due
	to idle time alone (depends on timeBetweenEvictionRunsMillis > 0)
	
	numTestsPerEvictionRun
	The number of connections to examine during each run of the
	idle object evictor thread (if any)
	
	connectionFactory
	The name of the connection factory implementation that should be
	used. If not set, default CF is used.
-->
<!ATTLIST connection-pool
    maxActive                       CDATA #IMPLIED
    maxIdle                         CDATA #IMPLIED
    maxWait                         CDATA #IMPLIED
    minEvictableIdleTimeMillis      CDATA #IMPLIED
    numTestsPerEvictionRun          CDATA #IMPLIED
    testOnBorrow                    (true|false) #IMPLIED
    testOnReturn                    (true|false) #IMPLIED
    testWhileIdle                   (true|false) #IMPLIED
    timeBetweenEvictionRunsMillis   CDATA #IMPLIED
    whenExhaustedAction             (0|1|2) #IMPLIED
	connectionFactory				CDATA #IMPLIED
>


<!--
	For interfaces or abstract classes a class-descriptor holds a sequence of
	extent-class elements.

	For concrete classes it must have field-descriptors that describe primitive
	typed instance variables.
	References to other persistent entity classes are specified by
	reference-descriptor elements.
	Collections or arrays attributes that contain other persistent entity
	classes are specified by collection-descriptor elements
	If no jdbc-connection-descriptor is specified, the default jdbc connection
	is used for this class.
	Concrete base classes, may specify a sequence of extent-class elements,
	naming the derived classes.
  -->
<!ELEMENT class-descriptor
	(extent-class+ |
	(jdbc-connection-descriptor?, extent-class*, field-descriptor+,
	 reference-descriptor*, collection-descriptor*))>

<!--
	The class attribute contains the full qualified name of the specified class.
	As this attribute is of type ID there can only be one class-descriptor per
	class.

	The isolation-level attribute specifies the transactional isolation to be
	used for this class.

	If the proxy attribute is set, proxies are used for all loading operations
	of instances of this class. If set to "dynamic", dynamic proxies are used.
	If set to another value this value is interpreted as the full-qualified
	name of the proxy class to use.

	The schema attribute may contain the database schema owning the table
	mapped to this class.

	The table attribute speciefies the table name this class is mapped to.

	The row-reader attribute may contain a full qualified class name.
	This class will be used as the RowReader implementation used to
	materialize instances of the persistent class.

	The sequence-manager attribute may contain a full qualified class name.
	This class will be used as the SequenceManager implementation for
	the persistent class.
  -->
<!ATTLIST class-descriptor
	class ID #REQUIRED
	isolation-level (read-uncommitted | read-committed | repeatable-read |
	                 serializable | optimistic) "read-uncommitted"
	proxy CDATA #IMPLIED
	schema CDATA #IMPLIED
	table CDATA #IMPLIED
	row-reader CDATA #IMPLIED
	sequence-manager CDATA #IMPLIED
>


<!--
	An extent-class element is used to specify an implementing class or a
	derived class that belongs to the extent of all instances of the interface
	or base class.
  -->
<!ELEMENT extent-class EMPTY>
<!--
	The class-ref attribute must contain a fully qualified classname.
	The repository file must contain a class-descriptor for this class.
  -->
<!ATTLIST extent-class
	class-ref IDREF #REQUIRED
>

<!--
  A field descriptor contains mapping info for a primitive typed
  attribute of a persistent class.
  -->
<!ELEMENT field-descriptor EMPTY>
<!--
	The id attribute must contain a unique number identifying the decriptor.
	The numbers for the attributes of a class must correspond to the order
	of columns in the mapped table.

	The name attribute holds the name of the persistent classes attribute.
	If the PersistentFieldDefaultImpl is used there must be an attribute
	in the persistent class with this name.
	If the PersistentFieldPropertyImpl is used there must be a JavaBeans
	compliant property of this name.

	The table attribute may specify a table different from the mapped
	table for the persistent class. (currently not implemented).

	The column attribute specifies the column the persistentent classes field
	is mapped to.

	The jdbc-type attribute specifies the JDBC type of the column.

	The primarykey specifies if the column is a primary key column.

	The nullable attribute specifies if the column may contain null values.

	The indexed attribute specifies if there is an index on this column

	The autoincrement attribute specifies if the values for the persistent
	attribute are automatically generated by OJB.

	The locking attribute is set to true if the persistent attribute is
	used for optimistic locking. can only be set for TIMESTAMP and INTEGER
	columns.

	The default-fetch attribute specifies whether the persistent attribute
	belongs to the JDO default fetch group.

	The conversion attribute contains a fully qualified class name.
	This class must implement the interface
	org.apache.ojb.accesslayer.conversions.FieldConversion.
	A FieldConversion can be used to implement conversions between Java-
	attributes and database columns.

	The length attribute can be used to specify a length setting, if
	required by the jdbc-type of the underlying database column.

	The precision attribute can be used to specify a precision setting, if
	required by the jdbc-type of the underlying database column.

	The scale attribute can be used to specify a sclae setting, if
	required by the jdbc-type of the underlying database column.

  -->
<!ATTLIST field-descriptor
	id CDATA #REQUIRED
	name CDATA #REQUIRED
	table CDATA #IMPLIED
	column CDATA #REQUIRED
	jdbc-type (BIT | TINYINT | SMALLINT | INTEGER | BIGINT | DOUBLE |
	           FLOAT | REAL | NUMERIC | DECIMAL | CHAR | VARCHAR |
	           LONGVARCHAR | DATE | TIME | TIMESTAMP | BINARY |
	           VARBINARY | LONGVARBINARY | CLOB | BLOB) #REQUIRED
	primarykey (true | false) "false"
	nullable (true | false) "true"
	indexed (true | false) "false"
	autoincrement (true | false) "false"
	locking (true | false) "false"
	default-fetch (true | false) "false"
	conversion CDATA #IMPLIED
	length CDATA #IMPLIED
	precision CDATA #IMPLIED
	scale CDATA #IMPLIED
>

<!--
    A reference-descriptor contains mapping info for an attribute of a
    persistent class that is not primitive but references another
    persistent entity Object.

    A foreignkey element contains information on foreign key columns that
    implement the association on the database level.
  -->
<!ELEMENT reference-descriptor ( foreignkey+)>
<!--
	The name attribute holds the name of the persistent classes attribute.
	If the PersistentFieldDefaultImpl is used there must be an attribute
	in the persistent class with this name.
	If the PersistentFieldPropertyImpl is used there must be a JavaBeans
	compliant property of this name.

	The class-ref attribute contains a fully qualified class name.
	This class is the Object type of the persistent reference attribute.
	As this is an IDREF there must be a class-descriptor for this class
	in the repository too.

	The proxy attribute can be set to true to specify that proxy based
	lazy loading should be used for this attribute.

	The refresh attribute can be set to true to force OJB to refresh
	object references on instance loading.

	The auto-retrieve attribute specifies whether OJB automatically retrieves
	this reference attribute on loading the persistent object.
	If set to false the reference attribute is set to null. In this case the
	user is responsible to fill the reference attribute.

	The auto-update attribute specifies whether OJB automatically stores
	this reference attribute on storing the persistent object.
	This attribute must be set to false if using the OTM, ODMG or JDO layer.

	The auto-delete attribute specifies whether OJB automatically deletes
	this reference attribute on deleting the persistent object.
	This attribute must be set to false if using the OTM, ODMG or JDO layer.
  -->
<!ATTLIST reference-descriptor
	name CDATA #REQUIRED
	class-ref IDREF #REQUIRED

	proxy (true | false) "false"
	refresh (true | false) "false"

	auto-retrieve (true | false) "true"
	auto-update (true | false) "false"
	auto-delete (true | false) "false"
>

<!--
    A foreignkey element contains information on a foreign-key persistent
    attribute that implement the association on the database level.
  -->
<!ELEMENT foreignkey EMPTY>
<!--
	The field-id-ref contains the id attribute of the field-descriptor
	used as a foreign key.
  -->
<!ATTLIST foreignkey
	field-id-ref CDATA #REQUIRED
>


<!--
    A collection-descriptor contains mapping info for a Collection- or
    Array-attribute of a  persistent class that contains persistent
    entity Objects.

    The inverse-foreignkey elements contains information on foreign-key
    attributes that implement the association on the database level.

    The fk-pointing-to-this-class and fk-pointing-to-element-class elements
    are only needed if the Collection or array implements a m:n association.
    In this case they contain information on the foreign-key columns of
    the intermediary table.
  -->
<!ELEMENT collection-descriptor (
    inverse-foreignkey*,
	fk-pointing-to-this-class*,
	fk-pointing-to-element-class*)>
<!--
	The name attribute holds the name of the persistent classes attribute.
	If the PersistentFieldDefaultImpl is used there must be an attribute
	in the persistent class with this name.
	If the PersistentFieldPropertyImpl is used there must be a JavaBeans
	compliant property of this name.

	The collection-class may hold a fully qualified class name.
	This class must be the Java type of the Collection attribute.
	This attribute must only specified if the attribute type is not
	a java.util.Collection (or subclass) or Array type.

	The element-class-ref attribute contains a fully qualified class name.
	This class is the Object type of the elements of persistent collection
	or Array attribute.
	As this is an IDREF there must be a class-descriptor for this class
	in the repository too.

	The orderby attribute may specify a field of the element class.
	The Collection or Array will be sorted according to the specified attribute.
	The sort attribute may be used to specify ascending or descending order for
	this operation.

	The indirection-table must specify the name of an intermediary table,
	if the persistent collection attribute implements a m:n association.

	The proxy attribute can be set to true to specify that proxy based
	lazy loading should be used for this attribute.

	The refresh attribute can be set to true to force OJB to refresh
	object and collection references on instance loading.

	The auto-retrieve attribute specifies whether OJB automatically retrieves
	this attribute on loading the persistent object.
	If set to false the persistent attribute is set to null. In this case the
	user is responsible to fill the persistent attribute.

	The auto-update attribute specifies whether OJB automatically stores
	this reference attribute on storing the persistent object.
	This attribute must be set to false if using the OTM, ODMG or JDO layer.

	The auto-delete attribute specifies whether OJB automatically deletes
	this reference attribute on deleting the persistent object.
	This attribute must be set to false if using the OTM, ODMG or JDO layer.
  -->
<!ATTLIST collection-descriptor
	name CDATA #IMPLIED
	collection-class CDATA #IMPLIED
	element-class-ref IDREF #REQUIRED
	orderby CDATA #IMPLIED
	sort (ASC | DESC) "ASC"

	indirection-table CDATA #IMPLIED

	proxy (true | false) "false"
	refresh (true | false) "false"

	auto-retrieve (true | false) "true"
	auto-update (true | false) "false"
	auto-delete (true | false) "false"
>

<!--
    A inverse-foreignkey element contains information on a foreign-key
    persistent attribute that implement the association on the database level.
  -->
<!ELEMENT inverse-foreignkey EMPTY>
<!--
	The field-id-ref contains the id attribute of the field-descriptor
	in the class of the collection elements that is used as a foreign key.
  -->
<!ATTLIST inverse-foreignkey
	field-id-ref CDATA #REQUIRED
>

<!--
    A fk-pointing-to-this-class element contains information on a foreign-key
    column of an intermediary table in a m:n scenario.
  -->
<!ELEMENT fk-pointing-to-this-class EMPTY>
<!--
	The column attribute specifies the foreign-key column in the intermediary
	table that points to the class holding the collection.
  -->
<!ATTLIST fk-pointing-to-this-class
	column CDATA #REQUIRED
>

<!--
    A fk-pointing-to-element-class element contains information on a foreign-key
    column of an intermediary table in a m:n scenario.
  -->
<!ELEMENT fk-pointing-to-element-class EMPTY>
<!--
	The column attribute specifies the foreign-key column in the intermediary
	table that points to the class of the collection elements.
  -->
<!ATTLIST fk-pointing-to-element-class
	column CDATA #REQUIRED
>
